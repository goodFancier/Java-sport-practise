/*
** Баги в наименовании
*/
// сеттер для поля isNeedToCalculateAllShops
needToCalculateAllShops - setNeedToCalculateAllShops

// метод, вызываемый при изменении вкладки
changeTab - onChangeTab

// Обновить статус товара
statusDelivered - updateOrderStatus


/*
** Рефакторинг имен переменных
*/
sqlTimeConditions - timeConditions

sqlShopsConditions - shopConditions

sqlConditionList - conditions

sqlBrandConditionList - brandConditions

tabId - planningTabId

allDetailingObjects - detailingObjectList

availableYears - availableYearList

filterYears - filterYearQueue

sizesOfPlanValues - planValueListSize

name - buyerName

age - buyerAge

order - receiptOrder

checkedSignificantBrandList - checkedSignificantBrands

getIsNeedToShowAddDialog - isNeedToShowDialog

/*
** Имена переменных
*/

// 7.1
processCompleted - isProcessCompleted

isNeedToUpdate - doNeedUpdate

isCalculatingError - hasCalculatingError

isMessageSendingStopped - doMailingStopped

queryRunning - isQueryRunning

// 7.2
processFinished - isProcessDone

isElementExists - isElementFound

// 7.3

i - element

// 7.4
isMailingStarted, isMailingFinished - isMailingBegin, isMailingEnd

// 7.5
tmpSelectItemChecks - selectItemChecks
tmpStart - dateStart
tmpFinish - dateFinish

/*
** Имена, которых следует избегать
*/

allChannelsForRetailer - allChannels

filteredByEmailAndSmsChannelList - emailSmsChannels

addChannelsNotification - allowAllChannelsToBuyer

channelsDtoDualListModel - channelDualList

consumerList - consumers

goodsValue - goodsCount

buyerList1 - buyerOriginalList

buyerList2 - buyerProcessedList

retailerObject - retailer

guaranteedMessageDeliveryScheduler - msgDeliveryScheduler

max - maxSumOfCheck

value - checkValue

/*
** Имена классов
*/

// 3.1
CreatePage - PageConstructor

RuleManager - RuleController

EntityInfo - EntityPayload

CheckDeserializeProcessor - CheckDeserializer

CardDeserializeProcessor - CardDeserializer

// 3.2

initCheckFile - initDocument (реализация абстрактного метода)

initCardFile - initDocument (реализация абстрактного метода)

applyDiscountMechanic - applyMechanic (реализация абстрактного метода)

applyBonusMechanic - applyMechanic (реализация абстрактного метода)

bonusRuleManager - ruleManager

discountRuleManager - ruleManager

pull - pullResult

/*
** Имена функций/методов
*/

sendMessageAndCheckDelivery - sendMessage() - checkDelivery() - разделил один метод на два, убрав побочные действия метода

runSmsExecutorAndSaveToFile - runSmsExecutor() - saveResultToFile() - разделил один метод на два, убрав побочные действия метода

getViberJSONObjectAndSendMessage - getViberJSON() - sendMessage() - разделил один метод на два, убрав побочные действия метода

editName - setName - переименовал метод для изменения имени

reloadPage() - reload() - поправил название метода, т.к метод reload относится к классу Page

sendMessage() - send() - поправил название метода, т.к метод send относится к классу Message

taxiOrderToComplete() - completeTaxiOrder() - поправил название метода

lastMessageToFind() - findLastMessage() - поправил название метода

pageReload() - reloadPage() - поправил название метода

Element element = prevElement.add(20) - int element = prevElement.setIndex(20) - переименовал методв add в setIndex

Date date = prevDate.add(20) - Date date = prevDate.addMinutes(20);

entityToUpdate() - updateEntity() - поправил название метода

/*
** ООП и интерфейсы
*/

// 3.1
//  Метод-фабрика DataServiceFactory
    public static synchronized DataServiceFactory getInstance()
    		{
    				if(instance == null)
    						synchronized(DataServiceFactory.class)
    						{
    								try
    								{
    										if(instance == null)
    										{
    												InitialContext context = new InitialContext();
    												instance = (DataServiceFactory)context.lookup("java:module/DataServiceFactory");
    										}
    								}
    								catch(Exception e)
    								{
    										ExceptionHandler.handle(e);
    								}
    						}
    				return instance;
    		}

// Метод-фабрика AuditoryOperatorFactory
AuditoryOperatorFactory auditoryOperatorFactory = new AuditoryOperatorFactory(stock) - AuditoryOperatorFactory.fromStock(stock);

// Метод-фабрика BonusOperatorFactory
BonusOperatorFactory bonusOperatorFactory = new BonusOperatorFactory(bonus) - BonusOperatorFactory.fromBonus(bonus);

// 3.2
IDiscountMechanic - DiscountMechanic
IRuleManager - RuleManager
IBonusMechanic - BonusMechanic

/*
** Константы
*/

// Добавлена константа для использования ее для именования входного параметра рест метода
private static final String NumberParamName = "number";
public CardJSON register(
		@NotNull @QueryParam(BaseRestORMService.RetailerParamName) String retailer,
		@CheckBuyer @NotNull @QueryParam(BaseRestORMService.BuyerIDParamName) Long buyerID,
		@NotNull @QueryParam(NumberParamName) String number) throws Exception

// Добавлена константа для использования ее для именования входного параметра рест метода
private static final String CardIDParamName = "cardID";

public CardJSON getCard(
		@NotNull @QueryParam(BaseRestORMService.RetailerParamName) String retailer,
		@CheckBuyer @NotNull @QueryParam(BaseRestORMService.BuyerIDParamName) Long buyerID,
		@NotNull @QueryParam(CardIDParamName) Long cardID)
	{
		return getJSON(DataServiceFactory.intance().getCardsService().findById(cardID));
	}

// Добавлена константа для использования ее для именования входного параметра рест метода
private static final String LoginParamName = "login";

	public BuyerJSON loginByHashPass(
			@NonNull @QueryParam(BaseRestORMService.RetailerParamName) String retailer,
			@NonNull @QueryParam(LoginParamName) String cardNumber,
			@NonNull String password,
			@QueryParam(DeviceParamName) String deviceID) throws Exception
		{
				return internalLogin(retailer, cardNumber, password, deviceID);
		}

// Добавлена константа для использования ее для именования входного параметра рест метода
public static final String PasswordParamName = "password";

public BuyerJSON loginByPass(
			@NonNull @QueryParam(BaseRestORMService.RetailerParamName) String retailer,
			@NonNull @QueryParam(LoginParamName) String cardNumber,
			@NonNull @QueryParam(PasswordParamName) String password,
			@QueryParam(DeviceParamName) String deviceID,
			@QueryParam(BuyerIDParamName) Long buyerID,
			@QueryParam(BaseRestORMService.isNewLogic) Boolean... newLogic) throws Exception
		{
				if(newLogic.length > 0)
						return internalLogin(retailer, cardNumber, password, deviceID, buyerID);
				else
						return internalLogin(retailer, cardNumber, password, deviceID);
		}

// Добавлена константа для использования ее для именования входного параметра рест метода
private static final String CardNumberParamName = "cardNumber";

	@POST
		@Path("/register/material4")
		@AccessAll
		public BuyerJSON registrationMaterialByHashPass(
			@NonNull @QueryParam(BaseRestORMService.RetailerParamName) String retailerCode,
			@NotNull @QueryParam(BaseRestORMService.BuyerParamName) BuyerJSON buyer,
			@NonNull @QueryParam(CardNumberParamName) String login,
			@NonNull String password,
			@QueryParam(DeviceParamName) String gmcid) throws Exception
		{
				return internalRegisterMaterial(retailerCode, login, password, gmcid, (o) -> createFromJSON(buyer));
		}

// Добавлена константа для использования ее для именования входного параметра рест метода
private static final String DeviceCheckParamName = "deviceCheck";

//Скидка по умолчанию
private static final Double DefaultDiscount = 0d;

// Формат даты
private static final DateFormat SimpleDateFormat = new SimpleDateFormat("yyyyMMdd");

// Формат даты
private static final DateFormat BirthDayDateFormat = new SimpleDateFormat("MMdd");

// Формат даты
private static final SimpleDateFormat GUIDateTimeFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");

// Формат даты
private static final SimpleDateFormat JQPlotDateTimeFormat = new SimpleDateFormat("MM.dd.yyyy HH:mm");

// Формат даты
private static final DateFormat FilenameDateTimeFormat = new SimpleDateFormat("ddMMyyyy HHmm");









